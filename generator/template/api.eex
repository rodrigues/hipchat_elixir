# Code generated by `$ mix hipchat.generate`<%# To reduce redundant newlines inserted, embed tags are written in narrow and compact manner %>
defmodule Hipchat.<%= String.upcase(version) %>.<%= Macro.camelize(basename) %> do
  @moduledoc """
  HipChat <%= String.upcase(version) %> <%= Macro.camelize(basename) %> API module.
  """

  alias Hipchat.{Client, Httpc}

  @endpoint "https://<%= host <> base_path %>"<%= for {link, method, identifier, path, path_params, has_query?, has_body?} <- apis do %>

  @doc """
  <%= "[#{link}](#{link})" %>
  """
  @spec <%= identifier %>(<%= Enum.join(["Client.t" | Enum.map(path_params, fn _ -> "String.t" end)], ", ") %><%= if has_query?, do: ", Client.query_params_t" %><%= if has_body?, do: ", map" %>) :: Httpc.res_t
  def <%= identifier %>(<%= Enum.join(["client" | path_params], ", ") %><%= if has_query?, do: ", query_params" %><%= if has_body?, do: ", body" %>) do
    Httpc.request(:<%= method %>,
                  "#{@endpoint}<%= path %>",
                  <%= if has_body?, do: "body", else: "\"\"" %>,
                  Client.headers(client),
                  Client.options(client, <%= if has_query?, do: "query_params", else: "[]" %>))
  end<% end %>
end
